#include <iostream>
using namespace std;
int binarysearch(int arr[], int t[], int end, int curr)
{
     int start = 0;
     int mid = 0;
     int len = end;
     while(start<=end)
     {
     	mid = (start+end)/2;
     	if(mid<len && arr[t[mid]]<curr && curr<arr[t[mid+1]])
     	  return mid+1;
     	else
     	 if(arr[t[mid]]<curr)
     	   start = mid+1;
     	 else
     	   end = mid-1;
     }
     return 0;
}

int longest_increasing_subsequence(int arr[], int size)
{
     int len=0;
     int t[size], r[size];
     for(int i =0; i<size; i++)
         r[i] = -1;
         t[0] = 0;
     for(int i= 1; i<size; i++)
     {
     	 
     	  
     	  
     	 	  if(arr[t[0]]>arr[i])
     	  	    t[0] = i;
     	  	  else
     	  	   if(arr[i]>arr[t[len]])
     	  	   {
     	  	   	 len++;
     	  	   	 t[len] = i;
     	  	   	 r[t[len]] = t[len-1];
     	  	   }
     	  	   else
     	  	   {
     	  	   	int index = binarysearch(arr, t, len, arr[i]);
     	  	   	t[index] = i;
     	  	   	r[t[index]] = t[index-1];
     	  	   }
     	  
     	    
     }
     cout<<"Longest Increasing Subsequence is-"<<endl;
     int var = t[len];
     while(var!=-1)
     {
     	cout<<arr[var]<<" ";
     	var = r[var];
     }
     cout<<endl;
     return len+1;
}
int main() {
	
	int arr[] = {3,4,-1,5,8,2,3,12,7,9,10};
    int length = longest_increasing_subsequence(arr, 11);
    cout<<length;
	return 0;
}
