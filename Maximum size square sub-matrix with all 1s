#include <iostream>
#include <algorithm>
using namespace std;

int max_size_subarray_with_all_1(int arr[5][5], int row, int column)
{
         int largest = 0;
         int table[row][column];
         for(int i=0; i<row; i++)
         {
         	for(int j =0; j<column; j++)
         	{
         		if(i==0 || j==0)
         		{
         			table[i][j] = arr[i][j];
         			if(largest<table[i][j])
         			  largest = table[i][j];
         		}
         		else
         		 if(arr[i][j] == 0)
         		   table[i][j] = 0;
         		 else
         		 {
         		 	table[i][j] = min(table[i][j-1], table[i-1][j-1], table[i-1][j]) + 1;
         		 	if(largest<table[i][j])
         			  largest = table[i][j];
         		 }
         	}
         }
         return largest;
}
int main() {
	
	int arr[][5] = {{1,1,0,1,1},
	               {0,1,1,1,1},
	               {0,0,1,1,1},
	               {1,1,1,1,1},
	               {0,1,1,1,0}};
	int largest_dimension = max_size_subarray_with_all_1(arr,5,5);
	cout<<largest_dimension;
	return 0;
}
